#!/bin/bash

SCRIPT_PATH="`dirname \"$0\"`"
cd ${SCRIPT_PATH}

print_style() {
    if [ "$2" == "info" ] ; then
        COLOR="96m"
    elif [ "$2" == "success" ] ; then
        COLOR="92m"
    elif [ "$2" == "warning" ] ; then
        COLOR="93m"
    elif [ "$2" == "danger" ] ; then
        COLOR="91m"
    else #default color
        COLOR="0m"
    fi

    STARTCOLOR="\e[$COLOR"
    ENDCOLOR="\e[0m"
    printf "$STARTCOLOR%b$ENDCOLOR" "$1"
}

help () {
    me=`basename "$0"`
    print_style "Jess dev command\n" "success";
    print_style "Usage:\n" "warning";
    print_style "   $me command [command_arguments]\n\n";
    print_style "Available commands:\n" "warning";
    print_style "Docker\n" "info"
    print_style "   up" "success";                  printf "\t\t\t Make the docker services alive.\n"
    print_style "   down" "success";                printf "\t\t\t Remove the docker services.\n"
    print_style "   build" "success";               printf "\t\t\t Build docker image.\n"
    print_style "   run-image" "success";           printf "\t\t\t Run docker image.\n"
    print_style "\n"
}


do_docker_compose() {
    docker-compose -f docker-compose.yml ${@}
}

do_docker_build() {
    docker build --no-cache -t fhaji/jess-bot:1 -f infrastructure/node/Dockerfile --target production .
}

do_docker_run_image() {
    docker run --env-file .env fhaji/jess-bot:1
}

command_up() {
    print_style "\nInitializing Docker Compose\n" "info"
    do_docker_compose up -d ${@}
}

if [[ $# -eq 0 ]] ; then
    help
    exit 1
fi

if [ "$1" == "up" ] ; then
    print_style "Boot All Services\n" "warning"
    shift
    command_up ${@}

elif [ "$1" == "down" ]; then
    print_style "Stopping Docker Compose\n" "info"
    do_docker_compose down

elif [ "$1" == "build" ]; then
    print_style "Building Docker Image\n" "info"
    do_docker_build

elif [ "$1" == "run-image" ]; then
    print_style "Run Docker Image\n" "info"
    do_docker_run_image
    
else
    print_style "Invalid arguments.\n" "danger"
    help
    exit 1
fi
